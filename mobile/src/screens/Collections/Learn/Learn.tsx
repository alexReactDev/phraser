import { useQuery } from "@apollo/client";
import { GET_COLLECTION_META } from "@query/collections";
import { StackScreenProps } from "@react-navigation/stack";
import { ScrollView, StyleSheet, Text, TouchableOpacity, View } from "react-native";
import { StackNavigatorParams } from "../Collections";
import Loader from "@components/Loaders/Loader";
import ErrorComponent from "@components/Errors/ErrorComponent";
import moment from "moment";
import { borderColor, fontColor, fontColorFaint } from "@styles/variables";
import { Ionicons } from '@expo/vector-icons';
import { GET_PREMIUM_DATA } from "@query/premium";
import session from "@store/session";
import { observer } from "mobx-react-lite";
import { CompositeScreenProps } from "@react-navigation/native";
import { BottomTabScreenProps } from "@react-navigation/bottom-tabs";
import { NavigatorParams, PremiumNavigatorParams } from "src/Navigation";
import PremiumBadge from "./components/PremiumBadge";
import BetaBadge from "./components/BetaBadge";
import ComingSoonBadge from "./components/ComingSoonBadge";

type Props = CompositeScreenProps<
	StackScreenProps<StackNavigatorParams, "Learn">,
	CompositeScreenProps<
		BottomTabScreenProps<NavigatorParams>,
		StackScreenProps<PremiumNavigatorParams>
	>
>;

const Learn = observer(function({ route, navigation }: Props) {
	const colId = route.params.colId;

	const { data, error, loading } = useQuery(GET_COLLECTION_META, { variables: { id: colId } });
	const { data: premiumData, error: premiumDataError, loading: premiumDataLoading } = useQuery(GET_PREMIUM_DATA, { variables: { userId: session.data.userId } });

	if(loading || premiumDataLoading) return <Loader />

	if(error || data?.errors?.length > 0) return <ErrorComponent message={"Failed to load collection data"} />
	if(premiumDataError) return <ErrorComponent message="Failed to load premium data" />

	const collection = data?.getCollection;
	const hasPremium = premiumData.getPremiumData.hasPremium;

	const lastRepetition = collection.meta.lastRepetition ? moment(collection.meta.lastRepetition).fromNow() : "Never";

	return (
		<View style={styles.container}>
			<View style={styles.data}>
				<Text style={styles.title}>
					Choose your way to learn
				</Text>
				<Text style={styles.subtitle}>
					Collection "{collection.name}"
				</Text>
				<View style={styles.dataValues}>
					<Text style={styles.text}>
						Phrases: {collection.meta.phrasesCount}
					</Text>
					<Text style={styles.text}>
						Repetitions: {collection.meta.repetitionsCount}
					</Text>
					<Text style={styles.text}>
						Last repetition: {lastRepetition}
					</Text>
				</View>
			</View>
			<ScrollView style={styles.buttons} contentContainerStyle={{ flexDirection: "row", flexWrap: "wrap", rowGap: 15, gap: 16, justifyContent: "center", alignItems: "center", paddingHorizontal: 10, paddingVertical: 15 }} >
				<TouchableOpacity 
					style={styles.card} 
					activeOpacity={0.7}
					onPress={() => navigation.navigate("Cards", { colId })}
				>
					<View style={styles.cardIconContainer} />
					<View style={styles.cardIconContainer}>
						<Ionicons name="copy" size={16} color="darkgrey" />
						<Text style={styles.cardTitle}>
							Cards
						</Text>
					</View>
					<Text style={styles.cardText}>
						Classic flip cards with translation on other side
					</Text>
				</TouchableOpacity>
				<TouchableOpacity 
					style={styles.card} 
					activeOpacity={0.7}
					onPress={() => hasPremium ? navigation.navigate("AIGeneratedText", { colId }) : navigation.navigate("Premium")}
				>
					{
						!hasPremium &&
						<PremiumBadge style={{ bottom: 8, right: -4 }} />
					}
					<View style={styles.cardIconContainer}>
						<Ionicons name="text" size={16} color="grey" />
						<Text style={styles.cardTitle}>
							AI generated text
						</Text>
					</View>
					<Text style={styles.cardText}>
						Text generated by ChatGPT that includes words from your collection
					</Text>
				</TouchableOpacity>
				<TouchableOpacity 
					style={styles.card} 
					activeOpacity={0.7}
					onPress={() => hasPremium ? navigation.navigate("Description", { colId }) : navigation.navigate("Premium")}
				>
					{
						!hasPremium &&
						<PremiumBadge style={{ bottom: 8, right: -4 }} />
					}
					<View style={styles.cardIconContainer}>
						<Ionicons name="reader" size={16} color="grey" />
						<Text style={styles.cardTitle}>
							Description
						</Text>
					</View>
					<Text style={styles.cardText}>
						Guess word by description or hint sentence generated by ChatGPT
					</Text>
				</TouchableOpacity>
				<TouchableOpacity 
					style={styles.card} 
					activeOpacity={0.7}
					onPress={() => hasPremium ? navigation.navigate("AssociativePictures", { colId }) : navigation.navigate("Premium")}
				>
					{
						!hasPremium
						?
						<PremiumBadge style={{ bottom: 8, right: -4 }} />
						:
						<BetaBadge style={{ bottom: 8, right: -4 }} />
					}
					<View style={styles.cardIconContainer}>
						<Ionicons name="images" size={16} color="grey" />
						<Text style={styles.cardTitle}>
							Associative pics
						</Text>
					</View>
					<Text style={styles.cardText}>
						Associative pictures generated by AI
					</Text>
				</TouchableOpacity>
			</ScrollView>
		</View>
	)
});

const styles = StyleSheet.create({
	container: {
		height: "100%"
	},
	data: {
		height: "30%",
		alignItems: "center",
		justifyContent: "center"
	},
	buttons: {
		height: "70%",
		borderTopWidth: 1,
		borderTopColor: "grey",
		backgroundColor: "#f7f7f7e5"
	},
	title: {
		marginBottom: 4,
		fontSize: 24,
		textAlign: "center",
		color: fontColor
	},
	subtitle: {
		marginBottom: 10,
		fontSize: 20,
		textAlign: "center",
		color: fontColor
	},
	dataValues: {

	},
	text: {
		color: fontColorFaint
	},
	card: {
		position: "relative",
		width: 160,
		height: 155,
		borderWidth: 1,
		borderColor: borderColor,
		borderRadius: 12,
		paddingHorizontal: 5,
		paddingVertical: 7,
		backgroundColor: "#fcfcfc",
		elevation: 1
	},
	cardIconContainer: {
		flexDirection: "row",
		gap: 5,
		flexWrap: "wrap"
	},
	cardTitle: {
		marginBottom: 3,
		fontSize: 16,
		color: fontColor
	},
	cardText: {
		color: fontColorFaint,
		fontSize: 12,
		lineHeight: 17
	}
})

export default Learn;