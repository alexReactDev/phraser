import { IPhraseInput, IPhraseRepetitionInput } from "../types/phrases";

import db from "../model/db";
import generateId from "../misc/generateId";
import globalErrorHandler from "../misc/globalErrorHandler";
import settingsController from "./Settings";
import { IContext } from "@ts-backend/context";
import collectionsController from "./Collections";
import { IAutoCollection } from "@ts/collections";

class PhrasesController {
	async getPhrase({ id }: { id: string }) {
		let phrase;

		try {
			phrase = await db.collection("phrases").findOne({ id });
		} catch (e) {
			globalErrorHandler(e);
			throw new Error(`Server error. Failed to get phrase ${e}`);
		}

		if(!phrase) throw new Error("404. Phrase not found");

		return phrase;
	}

	async getPhrasesByCollection({ id }: { id: string }) {
		const collection = await collectionsController.getCollection({ id }) as IAutoCollection;

		let phrases;

		if(collection.isAutoGenerated) {
			try {
				const cursor = await db.collection("phrases").find({
					id: { $in: collection.phrases }
				});
				phrases = await cursor.sort({ created: -1 }).toArray();
			} catch (e) {
				globalErrorHandler(e);
				throw new Error(`Server error. Failed to get collection phrases. ${e}`);
			}
		} else {
			try {
				const cursor = await db.collection("phrases").find({ collection: id });
				phrases = await cursor.sort({ created: -1 }).toArray();
			} catch (e) {
				globalErrorHandler(e);
				throw new Error(`Server error. Failed to get collection phrases. ${e}`);
			}
		}

		return phrases;
	}

	async createPhrase({ input, collection }: { input: IPhraseInput, collection: string }, context: IContext) {
		const col = await collectionsController.getCollection({ id: collection });

		if(col.isLocked) throw new Error("400. Bad request - collection is locked");

		const timestamp = new Date().getTime();
		const id = generateId();

 		const userSettings = await settingsController.getUserSettings({ id: context.auth.userId });

		const phrase = {
			...input,
			id,
			created: timestamp,
			lastUpdate: timestamp,
			meta: {
				repeated: 0,
				guessed: 0,
				forgotten: 0
			},
			collection,
			profile: userSettings.settings.activeProfile,
			userId: context.auth.userId
		}

		try {
			await db.collection("phrases").insertOne(phrase);
		} catch (e) {
			globalErrorHandler(e);
			throw new Error(`Server error. Failed to create phrase. ${e}`);
		}

		return phrase;
	}

	async mutatePhrase({ id, input }: { id: string, input: IPhraseInput }) {
		try {
			await db.collection("phrases").updateOne({ id }, {
				$set: {
					value: input.value,
					translation: input.translation
				}
			})
		} catch (e) {
			globalErrorHandler(e);
			throw new Error(`Server error. Failed to mutate phrase. ${e}`);
		}

		return "OK";
	}

	async movePhrase({ id, destId }: { id: string, destId: string }) {
		const dest = await collectionsController.getCollection({ id: destId });

		if(dest.isLocked) throw new Error("400. Bad request - collection is locked");

		try {
			await db.collection("phrases").updateOne({ id }, {
				$set: {
					collection: destId
				}
			})
		} catch (e: any) {
			globalErrorHandler(e);
			throw new Error(`Server error. Failed to move phrase ${e}`);
		}

		return "OK"
	}

	async moveMany({ ids, destId }: { ids: string[], destId: string}) {
		const dest = await collectionsController.getCollection({ id: destId });

		if(dest.isLocked) throw new Error("400. Bad request - collection is locked");

		try {
			await db.collection("phrases").updateMany({ id: { $in: ids } }, {
				$set: {
					collection: destId
				}
			})
		} catch (e) {
			globalErrorHandler(e);
			throw new Error(`Server error. Failed to move phrases ${e}`);
		}

		return "OK"
	}

	async mutatePhraseMeta({ id, input }: { id: string, input: IPhraseRepetitionInput }) {
		let phrase;

		try {
			phrase = await db.collection("phrases").findOne({ id });
		} catch (e) {
			globalErrorHandler(e);
			throw new Error(`Server error. Failed to get phrase. ${e}`);
		}

		if(!phrase) throw new Error("404. Collection not found");

		try {
			await db.collection("phrases").updateOne({ id }, {
				$set: {
					"meta.guessed": phrase.meta.guessed + input.guessed,
					"meta.forgotten": phrase.meta.forgotten + input.forgotten,
					"meta.lastRepetition": input.lastRepetition
				}
			});
		} catch (e) {
			globalErrorHandler(e);
			throw new Error(`Server error. Failed to edit phrase meta. ${e}`);
		}

		return "OK";
	}	

	async deletePhrase({ id }: { id: string }) {
		try {
			await db.collection("phrases").deleteOne({ id });
		} catch (e) {
			globalErrorHandler(e);
			throw new Error(`Server error. Failed to delete phrase. ${e}`);
		}

		return "OK";
	}

	async deleteMany({ ids }: { ids: string[] }) {
		try {
			await db.collection("phrases").deleteMany({ id: { $in: ids } });
		} catch (e) {
			globalErrorHandler(e);
			throw new Error(`Server error. Failed to delete phrases. ${e}`);
		}

		return "OK";
	}
}

export default new PhrasesController();